@page "/Applications/girlswhowalk"
@using Portfolio.Pages
@using Portfolio.Utilities
@inject IJSRuntime JS
@layout GamesAndAppsLayout


<!-- Section 1: Hero -->
<img src="Images/Girls Who Walk Logo Phone.png" alt="Banner Image" class="main-banner" />
<h1 id="about">Girls Who Walk App</h1>
<p class="description">
    Girls Who Walk helps women discover local walking groups, make new friends, 
    and explore their area safely. Whether you want to get active, connect with others, 
    or simply enjoy the outdoors, the app makes it easy to join walks in your community.

    <br /><br />

    It was developed to help my girlfriend with the workload of running one of these groups,
    and we believed that it could help other group leaders facing the same problems.
</p>

<hr class="section-divider" />

<div class="stats-section" id="games">
    <h2>App Production</h2>
    <div class="stats-content">
        <!-- Charts group -->
        <div class="chart-group">
            <div class="chart-item">
                <div class="chart-container">
                    <canvas id="grade"></canvas>
                    <div class="chart-value" id="gradeValue">@DownloadStats.GirlsWhoWalkDownloads</div>
                </div>
                <p class="chart-title">Overall Grade</p>
            </div>
        </div>

        <!-- Note to the right -->
        <div class="stats-note">
            This project was completed as a dissertation at Newcastle University and was received very positively. It achieved a high First Class, with strong marks across each section. It was praised by health professionals for its thorough research into both targeted muscle engagement and cognitive benefits — including the use of colour theory to enhance memory — plus accessibility-focused design and comprehensive performance and progress tracking.
        </div>
    </div>
</div>

<hr class="section-divider" />

<section class="image-text-section">
    <img src="Images/Walk Graphic.png" alt="Project Screenshot" />
    <div class="image-text-content">
        <h2>Features</h2>
        <p>
            There are 8 minigames for the patient to try. They are separated into 4 groups, with 2 unique movements
            targeted at each muscle in the hand. Three games are randomly chosen each time the user plays, so each experience
            is different and kept entertaining and varied.
        </p>
    </div>
</section>

<section class="image-text-section">
    <div class="image-text-content">
        <h2>Scene</h2>
        <p>
            The instructions for each game are shown beforehand, with diagrams to make it easy to play. These are presented
            until the user clicks or says “Play,” which will then start the game. The user also has the option to pause the game
            or replay using voice controls.
        </p>
    </div>
    <img src="Images/Connect Graphic.png" alt="Project Screenshot" />
</section>
<section class="image-text-section">
    <img src="Images/Customise Graphic.png" alt="Project Screenshot" />
    <div class="image-text-content">
        <h2>Scene</h2>
        <p>
            The instructions for each game are shown beforehand, with diagrams to make it easy to play. These are presented
            until the user clicks or says “Play,” which will then start the game. The user also has the option to pause the game
            or replay using voice controls.
        </p>
    </div>
    
</section>

<hr class="section-divider" />
<section class="features-section">
    <h2>Software</h2>
    <div class="features-grid">
        <div class="feature-card">
            <div class="feature-icons">
                <img class="feature-icon" src="@IconRef.GetIcon("flutter")" alt="Unity Icon">
                <img class="feature-icon" src="@IconRef.GetIcon("dart")" alt="C# Icon">
            </div>
            <div class="feature-title">Flutter + Dart</div>
            <p class="feature-desc">
                Unity was the best application to use with OpenCV, as the pinpoints in the hand could easily be treated as individual game objects. This made it easy to verify whether the hand movements were completed correctly, since only the proximity of the tracked points needed to be checked.
            </p>
        </div>
        <div class="feature-card">
            <div class="feature-icons">
                <img class="feature-icon" src="@IconRef.GetIcon("firebase")" alt="Unity Icon">
            </div>
            <div class="feature-title">Firebase</div>
            <p class="feature-desc">
                Unity was the best application to use with OpenCV, as the pinpoints in the hand could easily be treated as individual game objects. This made it easy to verify whether the hand movements were completed correctly, since only the proximity of the tracked points needed to be checked.
            </p>
        </div>
        <div class="feature-card">
            <div class="feature-icons">
                <img class="feature-icon" src="@IconRef.GetIcon("Javascript")" alt="Unity Icon">
            </div>
            <div class="feature-title">Javascript</div>
            <p class="feature-desc">
                Unity was the best application to use with OpenCV, as the pinpoints in the hand could easily be treated as individual game objects. This made it easy to verify whether the hand movements were completed correctly, since only the proximity of the tracked points needed to be checked.
            </p>
        </div>
        <div class="feature-card">
            <div class="feature-icons">
                <img class="feature-icon" src="@IconRef.GetIcon("xcode")" alt="Unity Icon">
                <img class="feature-icon" src="@IconRef.GetIcon("appstore")" alt="C# Icon">
            </div>
            <div class="feature-title">Xcode + App Store</div>
            <p class="feature-desc">
                Unity was the best application to use with OpenCV, as the pinpoints in the hand could easily be treated as individual game objects. This made it easy to verify whether the hand movements were completed correctly, since only the proximity of the tracked points needed to be checked.
            </p>
        </div>
        <div class="feature-card">
            <div class="feature-icons">
                <img class="feature-icon" src="@IconRef.GetIcon("googleplay")" alt="Unity Icon">
            </div>
            <div class="feature-title">Google Play Store</div>
            <p class="feature-desc">
                Unity was the best application to use with OpenCV, as the pinpoints in the hand could easily be treated as individual game objects. This made it easy to verify whether the hand movements were completed correctly, since only the proximity of the tracked points needed to be checked.
            </p>
        </div>

        <div class="feature-card">
            <div class="feature-icons">
                <img class="feature-icon" src="@IconRef.GetIcon("admob")" alt="Unity Icon">
            </div>
            <div class="feature-title">AdMob</div>
            <p class="feature-desc">
                Unity was the best application to use with OpenCV, as the pinpoints in the hand could easily be treated as individual game objects. This made it easy to verify whether the hand movements were completed correctly, since only the proximity of the tracked points needed to be checked.
            </p>
        </div>
    </div>
</section>

<script>
    window.renderChart = function (chartId, values) {
        const el = document.getElementById(chartId);
        if (!el || !window.Chart) return;

        const ctx = el.getContext('2d');

        // Destroy previous chart if it exists
        if (el._chartInstance) {
            el._chartInstance.destroy();
        }

        el._chartInstance = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['iPhone', 'iPad', 'Desktop'], // used only for tooltips
                datasets: [{
                    data: values,
                    backgroundColor: ['#e8869e', '#e57591', '#de607d'], // green, blue, orange
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '65%',
                animation: { duration: 700 },
                plugins: {
                    legend: { display: false }, // hides labels above
                    tooltip: { enabled: true }   // keeps hover tooltips
                }
            }
        });
    };
</script>



@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("renderChart", "grade", new object[] { 95, 5, 4 });
        }
    }
}
