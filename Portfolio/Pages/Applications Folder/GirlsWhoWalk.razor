@page "/Applications/girlswhowalk"
@using Portfolio.Pages
@using Portfolio.Utilities
@inject IJSRuntime JS
@layout GamesAndAppsLayout


<!-- Section 1: Hero -->
<img src="Images/Girls Who Walk Logo Phone.png" alt="Banner Image" class="main-banner" />
<h1 id="about">Girls Who Walk App</h1>
<p class="description">
    Girls Who Walk helps women discover local walking groups, make new friends, 
    and explore their area safely. Whether you want to get active, connect with others, 
    or simply enjoy the outdoors, the app makes it easy to join walks in your community.

    <br /><br />

    It was developed to help my girlfriend with the workload of running one of these groups,
    and we believed that it could help other group leaders facing the same problems.
</p>

<hr class="section-divider" />

<div class="stats-section" id="games">
    <h2>App Production</h2>
    <div class="stats-content">
        <!-- Charts group -->
        <div class="chart-group">
            <div class="chart-item">
                <div class="chart-container">
                    <canvas id="grade"></canvas>
                    <div class="chart-value" id="gradeValue">@DownloadStats.GirlsWhoWalkDownloads</div>
                </div>
                <p class="chart-title">Total Downloads</p>
            </div>
        </div>

        <!-- Note to the right -->
        <div class="stats-note">
           The app has received some downloads, however the full rollout of the application hasn't started yet. Once I get
           a few groups on the application to properly test it, I will communicate with more groups around the country to
           see if they are interested.
        </div>
    </div>
</div>

<hr class="section-divider" />

<section class="image-text-section">
    <img src="Images/Walk Graphic.png" alt="Project Screenshot" />
    <div class="image-text-content">
        <h2>Discover Walks</h2>
        <p>
            Users are able to browse the events in their local area. The events present the details, such as date and meeting location. Users can
            see number of remaining spots available on walks, and sign up to get involved. They can also see the leaders who will be taking
            charge of events.
        </p>
    </div>
</section>

<section class="image-text-section">
    <div class="image-text-content">
        <h2>Connect & Chat</h2>
        <p>
            Users can get involved with the community and talk to each other in the group chat, allowing them to make friends, find information about
            certain activites and more. There are also built in safety tools and reporting functions to ensure the safety of walkers.
        </p>
    </div>
    <img src="Images/Connect Graphic.png" alt="Project Screenshot" />
</section>
<section class="image-text-section">
    <img src="Images/Customise Graphic.png" alt="Project Screenshot" />
    <div class="image-text-content">
        <h2>Admin Capabilities - CHANGE PHOTO</h2>
        <p>
            As the developer, I can make certain users admins, who will run their area of the app. This means groups can add their own events
            and control their walking groups, giving more control to those who run it.
        </p>
    </div>
    
</section>

<section class="image-text-section">
    
    <div class="image-text-content">
        <h2>Legal</h2>
        <p>
            The legal side of things was very important to this application, as it is a social media for meeting up in person. A well thought out Privacy Policy
            and Child Safety Standard documentation were written up for the safety of users, and features like reporting users and email verification ensures this safety.
        </p>
    </div>
    <img src="Images/Customise Graphic.png" alt="Project Screenshot" />
</section>

<hr class="section-divider" />
<section class="features-section">
    <h2>Software</h2>
    <div class="features-grid">
        <div class="feature-card">
            <div class="feature-icons">
                <img class="feature-icon" src="@IconRef.GetIcon("flutter")" alt="Unity Icon">
                <img class="feature-icon" src="@IconRef.GetIcon("dart")" alt="C# Icon">
            </div>
            <div class="feature-title">Flutter + Dart</div>
            <p class="feature-desc">
                The project was originally started in Unity in March 2024, but was moved to flutter, due to its improved performance for such a project.
            </p>
        </div>
        <div class="feature-card">
            <div class="feature-icons">
                <img class="feature-icon" src="@IconRef.GetIcon("firebase")" alt="Unity Icon">
            </div>
            <div class="feature-title">Firebase</div>
            <p class="feature-desc">
                Firebase was used for the backend functionality of the app. Authentication and Realtime Database kept all the data of the users, Firestore kept the 
                data about walks and events, as well as the chat, and storage kept the images for all of this functionality. Functions was used for cleanup in the chat
                and also worked with messaging for push notifications.
            </p>
        </div>
        <div class="feature-card">
            <div class="feature-icons">
                <img class="feature-icon" src="@IconRef.GetIcon("Javascript")" alt="Unity Icon">
            </div>
            <div class="feature-title">Javascript</div>
            <p class="feature-desc">
                Javascript was paired with firebase functions to update the clean up the chat and the events in the app, as well as carry out the notifications.
            </p>
        </div>
        <div class="feature-card">
            <div class="feature-icons">
                <img class="feature-icon" src="@IconRef.GetIcon("xcode")" alt="Unity Icon">
                <img class="feature-icon" src="@IconRef.GetIcon("appstore")" alt="C# Icon">
            </div>
            <div class="feature-title">Xcode + App Store</div>
            <p class="feature-desc">
                Xcode was used to release the app to the App store. Since its release, it has gained @DownloadStats.GirlsWhoWalkDownloads downloads.
            </p>
        </div>
        <div class="feature-card">
            <div class="feature-icons">
                <img class="feature-icon" src="@IconRef.GetIcon("googleplay")" alt="Unity Icon">
            </div>
            <div class="feature-title">Google Play Store</div>
            <p class="feature-desc">
                The app was also released on the google play store, so all users could access it. It is currently only in a closed testing release, due to
                lack of testers.
            </p>
        </div>

        <div class="feature-card">
            <div class="feature-icons">
                <img class="feature-icon" src="@IconRef.GetIcon("admob")" alt="Unity Icon">
            </div>
            <div class="feature-title">AdMob</div>
            <p class="feature-desc">
                AdMob was used to incorporate carefully placed banner ads into the app, so that revenue could be generated.
            </p>
        </div>
    </div>
</section>

<script>
    window.renderChart = function (chartId, values) {
        const el = document.getElementById(chartId);
        if (!el || !window.Chart) return;

        const ctx = el.getContext('2d');

        // Destroy previous chart if it exists
        if (el._chartInstance) {
            el._chartInstance.destroy();
        }

        el._chartInstance = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: ['iPhone', 'iPad', 'Desktop'], // used only for tooltips
                datasets: [{
                    data: values,
                    backgroundColor: ['#e8869e', '#e57591', '#de607d'], // green, blue, orange
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '65%',
                animation: { duration: 700 },
                plugins: {
                    legend: { display: false }, // hides labels above
                    tooltip: { enabled: true }   // keeps hover tooltips
                }
            }
        });
    };
</script>



@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("renderChart", "grade", new object[] { 95, 5, 4 });
        }
    }
}
