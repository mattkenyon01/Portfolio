@page "/Games"
@using Microsoft.AspNetCore.Components.Web
@using Portfolio.Pages

@code {
    private List<string> selectedTags = new();

    private string GetIconForTag(string tag) => tag switch
    {
        "Games" => "icons/gamepad.svg",
        "Software" => "icons/code.svg",
        "Pycharm" => "images/Pycharm Icon.png",
        "C#" => "images/C Icon.png",
        "c" => "images/C Icon.png",
        "Supabase" => "images/Supabase.png",
        ".NET" => "images/NET.png",
        "HTML" => "images/HTML.png",
        "CSS" => "images/CSS.png",
        "Github" => "images/Github Icon.png",
        "Epic Online Services" => "images/Epic Games Icon.png",
        "JavaScript" => "images/Javascript.webp",
        "CMake" => "images/Cmake.png",
        "C++" => "images/C+ Icon.png",
        "Flutter" => "images/Flutter Icon.png",
        "Dart" => "images/Dart Icon.webp",
        "Unity" => "images/Unity Icon.webp",
        "Google Cloud" => "images/Google Cloud.png",
        "Document AI" => "images/Google Document AI.png",
        "Blazor" => "images/Blazor Icon.png",
        "Google AdMob" => "images/Google Ad Mob.webp",
        "OpenCV" => "images/OpenCV Icon.png",
        "Firebase" => "images/Firebase Icon.png",
        "Xcode" => "images/Xcode Icon.webp",
        "App Store" => "images/App Store Icon.png",
        "React" => "images/React.webp",
        "Excel" => "images/Excel.png",
        _ => "icons/default.svg"
    };

    private class Game
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public string Thumbnail { get; set; }
        public List<string> Tags { get; set; }
        public string DetailsUrl { get; set; }
        public string ButtonColor { get; set; }
    }

    private List<Game> allGames = new()
    {
       new Game
        {
            Title = "<span style='color:#911f1f;'>Castle Climbers</span>",
            Description = $@"Castle Climbers is an infinite 2D platformer I developed as my first big coding project,
            which spanned over the <span style='color:#911f1f; font-weight:bold;'>3 years</span>. It helped me properly
            get to grips with Unity and C#. It was also my first project using a backend server through firebase, as I wanted
            to add multiplayer functionality. Castle Climbers was also my first game to be
            published on the app store through the use of Xcode. Currently, it has gained <span style='color:#911f1f; font-weight:bold;'>
            {DownloadStats.CastleClimbersDownloads} total downloads</span>, and has a total
            playtime of <span style='color:#911f1f; font-weight:bold;'>88.36 hours</span> from all users.",
            Thumbnail = "images/Castle Climbers Background.png",
            DetailsUrl = "/Games/CastleClimbers",
            Tags = new() { "Unity", "C#", "Firebase", "JavaScript", "Xcode", "App Store" },
            ButtonColor = "#911f1f"
        },

        new Game
        {
            Title = "Game for recovery of Stroke",
            Description = $@"My first game for health was a project that I presented for my dissertation at the end of my Bachelor's degree. It achieved a <span style='color:#911f1f; font-weight:bold;'> first class grade (80%) </span> and was  <span style='color:#911f1f; font-weight:bold;'> praised by health
            professionals </span> after presentation, due to its accurate choice of movements and thoughtful investigation into muscles in the hand that were affected by reduced motor control. The psychological
            side was also praised, as the professionals stated that the choice of colour and the analysis system perfectly suit the act of rehabilitation. This project was also mentioned during my
            graduation from my Master's Degree, and was praised for adapting gameplay for the real world.",
            Thumbnail = "images/Hand Copy Cover.png",
            DetailsUrl = "#",
            Tags = new() { "Unity", "C#", "Pycharm", "OpenCV" }
        },
        new Game
        {
            Title = "<span style='color:#41d5c3;'>Bucket Connect</span>",
            Description = $@"Bucket Connect was my <span style='color:#41d5c3; font-weight:bold;'>first app developed in Flutter</span> after I expanded from mainly using Unity. It was published on the app store
            and currently has <span style='color:#41d5c3; font-weight:bold;'>{DownloadStats.BucketConnectDownloads} total downloads</span>. It also made use of Firebase, and implemented a friends system, allowing people to connect and share their bucket lists. The app also included 
            the ability to publish global ideas, which others could use as inspiration, and download to their own account. This was paired with a backend server to keep the data up to date. There was also an achievement system 
            to encourage people to keep using the app, and to increase retention.",
            Thumbnail = "images/Bucket Connect Web Cover.png",
            DetailsUrl = "#",
            Tags = new() { "Flutter", "Dart", "JavaScript", "Firebase", "Xcode", "App Store", "Google AdMob" },
            ButtonColor = "#41d5c3"
        },
        new Game
        {
            Title = "<span style='color:#eda193;'>Girls Who Walk</span>",
            Description = $@"Girls Who Walk was the first social media app I developed. It was originally developed in Unity, but was moved to Flutter and Dart for improved efficiency and aesthetics. It was made through the help of my girlfriend to help local girls find a social circle 
            where they felt comfortable and could make friends by organising activities around Newcastle. The app gained <span style='color:#eda193; font-weight:bold;'> {DownloadStats.GirlsWhoWalkDownloads} downloads </span> from users in Newcastle.",
            Thumbnail = "images/Girls Who Walk Logo Phone.png",
            DetailsUrl = "#",
            Tags = new() { "Flutter", "Dart", "JavaScript", "Firebase", "Xcode", "App Store", "Google AdMob" },
            ButtonColor = "#eda193"
        },
        new Game
        {
            Title = "<span style='color:#4169E1;'>Procedurally Generated 2D world</span>",
            Description = "A 2D survival and crafting game set in a procedurally generated underwater world. 79%. Based upon terraria and minecraft. Big world with chunk loading and efficient gameplay.",
            Thumbnail = "images/Cover.png",
            DetailsUrl = "#",
            Tags = new() { "Unity", "C++", "Excel" },
            ButtonColor = "#4169E1"
        },
        new Game
        {
            Title = "<span style='color:#999999;'>AI Receipt App</span>",
            Description = $@"My first app utilising advanced AI functionality through <span style='color:#999999; font-weight:bold;'> Google Document AI </span> to deal with problems I have faced at the dinner table. It allowed users to scan the bill and sort the different items into piles, so it was obvious
            who bought what, and showed what each person owed. The user interface was colourful and fun, and also allowed for the addition of a tip, which could either be split or paid in full.",
            Thumbnail = "images/Receipt Table.webp",
            DetailsUrl = "#",
            Tags = new() { "Flutter", "Dart", "Google Cloud", "Document AI" },
            ButtonColor = "#999999"
        },
         new Game
        {
            Title = "Game Recipe App",
            Description = "A 2D survival and crafting game set in a procedurally generated underwater world. Allowed slicing to work along Unity functionality",
            Thumbnail = "images/Analysis 1.jpeg",
            DetailsUrl = "#",
            Tags = new() { "React", "Supabase" }
        },
        new Game
        {
            Title = "<span style='color:#af2229;'>Car Arcade Game</span>",
            Description = "A 2D survival and crafting game set in a procedurally generated underwater world.",
            Thumbnail = "images/Car Game.png",
            DetailsUrl = "#",
            Tags = new() { "Unity", "C#" },
            ButtonColor = "#af2229"
        },
        new Game
        {
            Title = "<span style='color:#8c3c00;'>Top Down Shooter</span>",
            Description = $@"A top down shooter that was a project for University, which utilised procedurally generating rooms to create an infinite map to explore, with a minimap to track location.
            It also featured complex AI enemies with state machines, as well as flocking, dynamic difficulty and complex physics. All these features enabled me to achieve a grade of <span style='color:#8c3c00; font-weight:bold;'>88% </span> on this assignment.",
            Thumbnail = "images/Uni Game 1.png",
            DetailsUrl = "#",
            Tags = new() { "Unity", "C#" },
            ButtonColor = "#8c3c00"
        },
        new Game
        {
            Title = "<span style='color:#209f1a;'>Unity World</span>",
            Description = "70% - Efficiency is important",
            Thumbnail = "images/Uni Unity Scene.png",
            DetailsUrl = "#",
            Tags = new() { "Unity", "C#" },
            ButtonColor = "#209f1a"
        },
        new Game
        {
            Title = "<span style='color:#489db7;'>CMake World</span>",
            Description = "75%",
            Thumbnail = "images/Scene.png",
            DetailsUrl = "#",
            Tags = new() { "CMake", "C++" },
            ButtonColor = "#489db7"
        },
        new Game
        {
            Title = "Uni CMake Project",
            Description = "86%",
            Thumbnail = "images/Scene 2.png",
            DetailsUrl = "#",
            Tags = new() { "CMake", "C++" }
        },
        new Game
        {
            Title = "Uni Group Project",
            Description = "72%",
            Thumbnail = "images/Scene 2.png",
            DetailsUrl = "#",
            Tags = new() { "CMake", "C++", "Epic Online Services", "Github" }
        },
        new Game
        {
            Title = "Conway's Game of Life",
            Description = "For a University project, I was required to recreate Conway's Game of Life, which simulated the lifetime of cells in a grid depending on their neighbours. Due to the accuracy of the program, and the evidence that "
            + "it was able to regenerate all of the common structures from the game, I was given a grade of <span class='highlight'> 100%</span>.",
            Thumbnail = "images/Scene 2.png",
            DetailsUrl = "#",
            Tags = new() { "C++" }
        },
        
        
        
        new Game
        {
            Title = "Music Tracker App",
            Description = "A simple app that allows users to record what live music they have seen, so its easily comparible to others.",
            Thumbnail = "images/GWW Icon.jpg",
            DetailsUrl = "#",
            Tags = new() { "Flutter", "Dart" }
        },
        new Game
        {
            Title = "<span style='color:#00efff;'>Interactive World Map</span>",
            Description = "An interactive world map that was part of a larger project that highlighted the issues of polution and its effect on the planet and its inhabitants.",
            Thumbnail = "images/World 1.png",
            DetailsUrl = "#",
            Tags = new() { "Unity", "C#" },
            ButtonColor = "#00efff"
        },
        new Game
        {
            Title = "<span style='color:#fc7025;'>Kenyon Dev Labs Website</span>",
            Description = "A 2D survival and crafting game set in a procedurally generated underwater world.",
            Thumbnail = "images/Web.png",
            DetailsUrl = "#",
            Tags = new() { "Blazor", ".NET", "HTML", "CSS" },
            ButtonColor = "#fc7025"
        },
        new Game
        {
            Title = "2D platformer",
            Description = "A 2D survival and crafting game set in a procedurally generated underwater world.",
            Thumbnail = "images/GWW Icon.jpg",
            DetailsUrl = "#",
            Tags = new() { "Unity", "C++" }
        },
        
       
    };

    private bool MatchesSelectedTags(Game game)
    {
        if (selectedTags.Count == 0)
            return true;

        return selectedTags.All(tag => game.Tags.Contains(tag));
    }


    private void HandleSelect(ChangeEventArgs e, string category)
    {
        var value = e.Value?.ToString();
        if (string.IsNullOrWhiteSpace(value) ||
            value == "Type" || value == "Language" || value == "Engine/Framework" || value == "Additional Tech")
            return;

        if (category == "Type")
            return;

        if (!selectedTags.Contains(value))
            selectedTags.Add(value);
    }

    private Dictionary<string, List<string>> tagCategories = new()
{
    { "Language", new List<string> { "C#", "Pycharm", "JavaScript", "Lua" } },
    { "Framework", new List<string> { "Unity", "Godot", "Unreal", "Blazor" } },
    { "Tech", new List<string> { "Google Ad Mob", "SQLite", "Shader Graph", "WebGL" } },
};

    private bool showLanguageDropdown;
    private string GetTagDisplayName(string tag) => tag; // Modify if you want nicer labels


    private void RemoveTag(string tag)
    {
        selectedTags.Remove(tag);
    }
}

<style>
    body, html {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', sans-serif;
        background-color: #1e1e1e;
        color: white;
    }

    .navbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 32px;
        background-color: #1e1e1e;
    }

        .navbar .logo {
            font-size: 1.5rem;
            font-weight: bold;
            color: #ffa500;
        }

        .navbar .menu {
            display: flex;
            gap: 24px;
        }

            .navbar .menu a {
                text-decoration: none;
                color: white;
                font-weight: 500;
            }

                .navbar .menu a:hover {
                    color: #ffa500;
                }

    .games-page {
        padding: 64px;
    }

    .games-header {
        font-size: 2.5rem;
        margin-bottom: 32px;
        color: #ffa500;
        font-weight: bold;
    }

    .filter-bar {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;
        align-items: center;
        margin-bottom: 24px;
    }

        .filter-bar select {
            padding: 8px 12px;
            border-radius: 6px;
            border: none;
            background-color: #2a2a2a;
            color: white;
            font-size: 1rem;
            min-width: 160px;
        }

    .selected-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-left: auto;
    }

    .tag {
        border-radius: 50%;
        padding: 12px;
        font-size: 0.85rem;
        font-weight: 600;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: 0.2s;
    }

        .tag:hover {
            background-color: #ffb733;
        }

    .game-card {
        background-color: #2a2a2a;
        border-radius: 12px;
        padding: 24px;
        margin-bottom: 24px;
        display: flex;
        gap: 24px;
        align-items: center;
        box-shadow: 0 0 10px #00000055;
    }

    .game-thumbnail {
        width: 300px;
        height: auto;
        object-fit: cover;
        border-radius: 8px;
        background-color: #444;
    }


    .game-info {
        flex: 1;
    }

    .game-title {
        font-size: 1.5rem;
        margin-bottom: 8px;
        font-weight: bold;
    }

    .game-description {
        color: #d3d3d3;
        line-height: 1.5;
        margin-bottom: 20px;
    }

    .game-button {
        margin-top: 20px;
        color: black;
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-weight: 600;
        text-decoration: none;
    }


        .game-button:hover {
            background-color: #ffb733;
        }

    .tag-icon {
        width: 50px;
        height: 50px;
        object-fit: contain;
        display: inline-block;
        margin: 2px;
    }

</style>

<!-- NAVIGATION -->
<div class="navbar">
    <div class="logo">MATT</div>
    <div class="menu">
        <a href="/">Home</a>
        <a href="#">About</a>
        <a href="/Games">Games</a>
        <a href="#">Blog</a>
        <a href="#">Contact</a>
    </div>
</div>

<!-- PAGE CONTENT -->
<div class="games-page">
    <div class="games-header">My Projects</div>

    <!-- FILTER BAR -->
    <div class="filter-bar">
        <select @onchange='e => HandleSelect(e, "Type")'>
            <option selected disabled>Type</option>
            <option>Games</option>
            <option>Software</option>
        </select>

        <select @onchange='e => HandleSelect(e, "Language")'>
            <option selected disabled>Language</option>
            <option>C#</option>
            <option>Pycharm</option>
            <option>JavaScript</option>
            <option>Lua</option>
        </select>
        <select @onchange='e => HandleSelect(e, "Framework")'>
            <option selected disabled>Engine/Framework</option>
            <option>Unity</option>
            <option>Godot</option>
            <option>Unreal</option>
            <option>Blazor</option>
        </select>
        <select @onchange='e => HandleSelect(e, "Tech")'>
            <option selected disabled>Additional Tech</option>
            <option>Google AdMob</option>
            <option>SQLite</option>
            <option>Shader Graph</option>
            <option>WebGL</option>
        </select>

        <!-- Selected Tags -->
        <div class="selected-tags">
            @foreach (var tag in selectedTags)
            {
                <div class="tag" @onclick="() => RemoveTag(tag)">
                    <img src="@GetIconForTag(tag)" alt="@tag" class="tag-icon" />
                </div>
            }
        </div>

    </div>

    @foreach (var game in allGames.Where(MatchesSelectedTags))
    {
        <div class="game-card">
            <img src="@game.Thumbnail" class="game-thumbnail" alt="@game.Title" />
            <div class="game-info">
                <div class="game-title-wrapper" style="display: flex; align-items: center; width: 100%;">
                    <div class="game-title">
                        @((MarkupString)game.Title)
                    </div>
                    <div style="display: flex; gap: 6px; margin-left: auto;">
                        @foreach (var tag in game.Tags)
                        {
                            <img src="@GetIconForTag(tag)" alt="@tag" style="width: 40px; height: 40px;" />
                        }
                    </div>
                </div>
                <div class="game-description">@((MarkupString)game.Description)</div>

                <NavLink class="game-button"
                         href="@game.DetailsUrl"
                         style=@($"background-color:{game.ButtonColor ?? "#ffa500"}; color:black;")>
                    View Details
                </NavLink>


            </div>
        </div>
    }

</div>
